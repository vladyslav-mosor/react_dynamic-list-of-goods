{"version":3,"sources":["components/GoodsList/GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["GoodsList","React","memo","goods","map","name","id","color","style","getAll","fetch","then","response","ok","Error","statusText","json","buttons","text","loadFunction","dataCy","sort","previousGood","currentGood","localeCompare","slice","filter","App","useState","setGoods","loading","setLoading","hasLoadingError","setHasLoadingError","loadGoods","useCallback","a","initialGoods","handleClick","className","type","onClick","length","width","ReactDOM","render","document","getElementById"],"mappings":"wQAOaA,EAA6BC,IAAMC,MAC9C,gBAAGC,EAAH,EAAGA,MAAH,OACE,6BACGA,EAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAIC,EAAb,EAAaA,MAAb,OACT,oBAEE,UAAQ,OACRC,MAAO,CAAED,SAHX,SAKGF,GAJIC,W,QCPR,SAASG,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,YAG3B,OAAOH,EAASI,UAIf,ICNDC,EAAoB,CACxB,CACEC,KAAM,iBACNC,aAAcV,EACdW,OAAQ,cAEV,CACEF,KAAM,qBACNC,aDFqB,WACvB,OAAOV,IACJE,MAAK,SAAAR,GAAK,OAAI,YAAIA,GAChBkB,MAAK,SAACC,EAAcC,GACnB,OAAOD,EAAajB,KAAKmB,cAAcD,EAAYlB,SAEpDoB,MAAM,EAAG,OCHZL,OAAQ,qBAEV,CACEF,KAAM,iBACNC,aDEuB,WACzB,OAAOV,IACJE,MAAK,SAAAR,GAAK,OAAIA,EAAMuB,QAAO,kBAAyB,QAAzB,EAAGnB,aCH/Ba,OAAQ,eAICO,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAOzB,EAAP,KAAc0B,EAAd,KACA,EAA8BD,oBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA8CH,oBAAS,GAAvD,mBAAOI,EAAP,KAAwBC,EAAxB,KAEMC,EAAYC,sBAAW,uCAAC,WAAOhB,GAAP,eAAAiB,EAAA,6DAC5BL,GAAW,GACXE,GAAmB,GAFS,kBAKCd,IALD,OAKpBkB,EALoB,OAO1BR,EAASQ,GACTN,GAAW,GACXE,GAAmB,GATO,kDAW1BA,GAAmB,GACnBF,GAAW,GAZe,0DAAD,sDAc1B,IAEGO,EAAcH,uBAAY,SAC9BhB,GAEAe,EAAUf,KACT,CAACe,IAEJ,OACE,sBAAKK,UAAU,MAAf,UACE,uDACCtB,EAAQb,KAAI,gBAAGc,EAAH,EAAGA,KAAME,EAAT,EAASA,OAAQD,EAAjB,EAAiBA,aAAjB,OACX,wBACEqB,KAAK,SACLD,UAAU,UACV,UAASnB,EACTqB,QAAS,kBAAMH,EAAYnB,IAJ7B,SAOGD,GAFIA,MAMRc,GACC,oEAGgB,IAAjB7B,EAAMuC,QAAgBZ,GACrB,cAAC,IAAD,CAAMa,MAAO,KAGf,cAAC3C,EAAD,CAAWG,MAAOA,QC3ExByC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.16d76fb4.chunk.js","sourcesContent":["import React from 'react';\nimport { Good } from '../../types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = React.memo(\n  ({ goods }) => (\n    <ul>\n      {goods.map(({ name, id, color }) => (\n        <li\n          key={id}\n          data-cy=\"good\"\n          style={{ color }}\n        >\n          {name}\n        </li>\n      ))}\n    </ul>\n  ),\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      return response.json();\n    });\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => [...goods]\n      .sort((previousGood, currentGood) => {\n        return previousGood.name.localeCompare(currentGood.name);\n      })\n      .slice(0, 5));\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => goods.filter(({ color }) => color === 'red'));\n};\n","import './App.scss';\nimport { Oval } from 'react-loader-spinner';\n\nimport React, { useCallback, useState } from 'react';\nimport { GoodsList } from './components/GoodsList';\nimport { Good } from './types/Good';\nimport { Button } from './types/Button';\n\nimport { getAll, get5First, getRedGoods } from './api/goods';\n\nconst buttons: Button[] = [\n  {\n    text: 'Load all goods',\n    loadFunction: getAll,\n    dataCy: 'all-button',\n  },\n  {\n    text: 'Load 5 first goods',\n    loadFunction: get5First,\n    dataCy: 'first-five-button',\n  },\n  {\n    text: 'Load red goods',\n    loadFunction: getRedGoods,\n    dataCy: 'red-button',\n  },\n];\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  const loadGoods = useCallback(async (loadFunction: () => Promise<Good[]>) => {\n    setLoading(true);\n    setHasLoadingError(false);\n\n    try {\n      const initialGoods = await loadFunction();\n\n      setGoods(initialGoods);\n      setLoading(false);\n      setHasLoadingError(false);\n    } catch (error) {\n      setHasLoadingError(true);\n      setLoading(false);\n    }\n  }, []);\n\n  const handleClick = useCallback((\n    loadFunction: () => Promise<Good[]>,\n  ): void => {\n    loadGoods(loadFunction);\n  }, [loadGoods]);\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of Goods</h1>\n      {buttons.map(({ text, dataCy, loadFunction }) => (\n        <button\n          type=\"button\"\n          className=\"buttton\"\n          data-cy={dataCy}\n          onClick={() => handleClick(loadFunction)}\n          key={text}\n        >\n          {text}\n        </button>\n      ))}\n\n      {hasLoadingError && (\n        <p>An error occured when loading data!</p>\n      )}\n\n      {goods.length === 0 && loading && (\n        <Oval width={40} />\n      )}\n\n      <GoodsList goods={goods} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}